buildscript {
  dependencyLocking {
    lockAllConfigurations()
  }

  repositories {
    mavenCentral()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'com.netflix.nebula:nebula-release-plugin:15.3.1'
    classpath 'com.netflix.nebula:nebula-publishing-plugin:17.3.2'
    classpath 'com.netflix.nebula:nebula-project-plugin:8.1.0'
    classpath 'io.spring.nohttp:nohttp-gradle:0.0.10'
    classpath 'io.github.gradle-nexus:publish-plugin:1.1.0'
  }

  configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

// TODO: remove this hack, see: https://github.com/nebula-plugins/nebula-release-plugin/issues/213
def releaseStage = findProperty('release.stage')
apply plugin: 'nebula.release'
release.defaultVersionStrategy = nebula.plugin.release.git.opinion.Strategies.SNAPSHOT

apply plugin: 'io.github.gradle-nexus.publish-plugin'

allprojects {
  group = 'io.micrometer.prometheus'
  description = 'RSocket proxy to pull metrics from applications that can only open egress'
  ext.'release.stage' = releaseStage ?: 'SNAPSHOT'

  afterEvaluate { project -> println "I'm configuring $project.name with version $project.version" }
}

subprojects {
  apply plugin: 'signing'
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.nohttp'
  apply plugin: 'nebula.maven-publish'
  apply plugin: 'nebula.maven-manifest'
  apply plugin: 'nebula.maven-developer'
  apply plugin: 'nebula.javadoc-jar'
  apply plugin: 'nebula.source-jar'
  apply plugin: 'nebula.maven-apache-license'
  apply plugin: 'nebula.publish-verification'
  apply plugin: 'nebula.contacts'
  apply plugin: 'nebula.info'
  apply plugin: 'nebula.project'

  dependencies {
    checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:latest.release'
  }

  compileJava {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
      options.compilerArgs.addAll(['--release', '8'])
    }
  }

  compileTestJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.current()
    targetCompatibility = JavaVersion.current()
  }

  jar {
    manifest.attributes.put('Automatic-Module-Name', project.name.replace('-', '.'))
    metaInf {
      from "$rootDir/LICENSE"
      from "$rootDir/NOTICE"
    }
  }

  normalization {
    runtimeClasspath {
      metaInf {
        [
          'Build-Date',
          'Built-By',
          'Built-OS',
          'Build-Host',
          'Build-Job',
          'Build-Number',
          'Build-Id',
          'Change',
          'Full-Change',
          'Branch',
          'Module-Origin'
        ].each {
          ignoreAttribute it
          ignoreProperty it
        }
      }
    }
  }

  dependencyLocking {
    lockAllConfigurations()
  }

  tasks.register('resolveAndLockAll') {
    description = 'Resolves dependencies of all configurations and writes them into the lock file.'
    outputs.upToDateWhen { false }
    doFirst {
      assert gradle.startParameter.writeDependencyLocks || gradle.startParameter.lockedDependenciesToUpdate : 'Execute resolveAndLockAll --write-locks or --update-locks <dependencies>'
    }
    doLast {
      project.configurations.findAll { it.canBeResolved }*.resolve()
    }
  }

  tasks.register('downloadDependencies') {
    outputs.upToDateWhen { false }
    doLast {
      project.configurations.findAll { it.canBeResolved }*.files
    }
  }

  def check = tasks.findByName('check')
  if (check) project.rootProject.tasks.releaseCheck.dependsOn check

  contacts {
    'tludwig@vmware.com' {
      moniker 'Tommy Ludwig'
      github 'shakuzen'
    }
  }

  plugins.withId('maven-publish') {
    publishing {
      publications {
        nebula(MavenPublication) {
          // Nebula converts dynamic versions to static ones so it's ok.
          suppressAllPomMetadataWarnings()
        }
      }
      repositories {
        maven {
          name = 'Snapshot'
          url = 'https://repo.spring.io/snapshot'
          credentials {
            username findProperty('SNAPSHOT_REPO_USER')
            password findProperty('SNAPSHOT_REPO_PASSWORD')
          }
        }
        maven {
          name = 'Milestone'
          url = 'https://repo.spring.io/milestone'
          credentials {
            username findProperty('MILESTONE_REPO_USER')
            password findProperty('MILESTONE_REPO_PASSWORD')
          }
        }
      }
    }

    signing {
      required = System.env.CIRCLE_STAGE == 'deploy'
      useInMemoryPgpKeys(findProperty('SIGNING_KEY'), findProperty('SIGNING_PASSWORD'))
      sign publishing.publications.nebula
    }

    // Nebula doesn't interface with Gradle's module format so just disable it for now.
    tasks.withType(GenerateModuleMetadata) {
      enabled = false
    }
  }
}

nexusPublishing {
  repositories {
    mavenCentral {
      nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
      snapshotRepositoryUrl.set(uri('https://repo.spring.io/snapshot/')) // not used but necessary for the plugin
      username = findProperty('MAVEN_CENTRAL_USER')
      password = findProperty('MAVEN_CENTRAL_PASSWORD')
    }
  }
}

wrapper {
  gradleVersion = '7.4'
}

defaultTasks 'build'
